#include "main.h"

/**
  * _printf - custom printf version
  * @format: character string with specifiers
  * Return: expanded strings
  */

int _printf(char *format, ...)
{
	char *buffer;
	va_list valist; /* initializing the args*/
	char* (*f)(va_list);
	int counter = 0, j = 0, len = 0;

	if (format == NULL)
		return (-1);

	buffer = create_a_buffer(); /* a tmp memory location using malloc */
	if (buffer == NULL)
		return (-1);

	va_start(valist, format);

	while (format[j] != '\0')
	{
		if (format[j] != '%')
		{
			len = scan_buffer_overflow(buffer, len);
			buffer[len++] = format[j++]; /*index j&len and j++&len++*/
			counter++;
		}
		else /* % encounterd here and find the equiv util func*/
		{
			j++;
			if (format[j] == '\0') /* handle single ending % */
			{
				va_end(valist);
				free(buffer);
				return (-1);
			}
			if (format[j] == '%') /* handle double % symbol */
			{
				len = scan_buffer_overflow(buffer, len);
				buffer[len++] = format[j];
				counter++;
			}
			else /* using variadic func to dynamically call func */
			{
				f = get_func(format[j]);
				process_func(f, &buffer, &len, &counter);
			} j++;
		}
	}
	print_buffer(buffer, len, valist);
	return (counter);
}

int process_func(char* (*f)(va_list), char* buffer, int* len, int* counter)
{
	int  i = 0;
	char *s,

	if (f == NULL)
	{
		*len = scan_buffer_overflow(buffer, len);
		*buffer[len++] = '%';
		*counter++;
		*buffer[len++] = format[j];
		*counter++;
	}
	else
	{
		s = f(valist);
		if (s == NULL) /* validating null or empty*/
		{
			va_end(valist); /* cleanup */
			free(buffer);
			return (-1);
		}
		i = 0;
		while (s[i] != '\0') /* iterating the string *s */
		{
			*len = scan_buffer_overflow(buffer, len);
			*buffer[len++] = s[i++]; /* s[i]&i++ */
			*counter++;
		}
		free(s);
	}
	return (0);
}

